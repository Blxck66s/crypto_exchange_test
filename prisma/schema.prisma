// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum currency_type {
  fiat
  crypto
}

enum order_type {
  buy
  sell
}

enum payment_method {
  bank_transfer
  prompt_pay
}

enum order_status {
  open
  cancelled
  expired
}

enum transaction_type {
  deposit
  withdraw
  order
  place_order
  cancel_order
  transfer_crypto
  transfer_fiat
}

enum transaction_status {
  pending
  completed
  failed
}

model User {
  id           String        @id @default(uuid()) @db.Uuid
  displayName  String        @map("display_name")
  email        String        @unique
  password     String        
  status       String        @default("active")
  role         String        @default("user")
  createdAt    DateTime      @default(now())    @map("created_at")
  updatedAt    DateTime      @updatedAt         @map("updated_at")

  orders       Order[]       
  wallets      UserWallet[]  
  transactions Transaction[] @relation("from_user")
  transactionsTo Transaction[] @relation("to_user")

  @@map("user")
}

model Currency {
  id               String        @id @default(uuid()) @db.Uuid
  name             String        
  codeName         String        @unique @db.VarChar(10) @map("code_name")
  type             currency_type
  contractAddress  String?       @map("contract_address")
  decimals         Int           @default(18)
  createdAt        DateTime      @default(now())         @map("created_at")
  updatedAt        DateTime      @updatedAt              @map("updated_at")

  wallets          UserWallet[]  
  orders           Order[]       @relation("fiat_currency")
  baseOrders       Order[]       @relation("base_currency")

  @@unique([codeName, type])
  @@map("currency")
}

model UserWallet {
  id              String       @id @default(uuid()) @db.Uuid @map("id")
  userId          String       @db.Uuid @map("user_id")
  currencyId      String       @db.Uuid @map("currency_id")
  depositAddress  String?      @unique  @map("deposit_address")
  privateKey      Json?        @map("private_key")
  balance         Decimal      @default(0)
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt      @map("updated_at")

  user            User         @relation(fields: [userId], references: [id])
  currency        Currency     @relation(fields: [currencyId], references: [id])

  @@unique([userId, currencyId])
  @@map("user_wallet")
}

model Order {
  id                   String               @id @default(uuid()) @db.Uuid
  userId               String               @db.Uuid @map("user_id")
  baseCurrencyId       String               @db.Uuid @map("base_currency_id")
  fiatCurrencyId       String               @db.Uuid @map("fiat_currency_id")
  orderType            order_type           @map("order_type")
  price                Decimal              @db.Decimal(36, 18)
  originalAmount       Decimal              @db.Decimal(36, 18) @map("original_amount")
  remainingAmount      Decimal              @db.Decimal(36, 18) @map("remaining_amount")
  minAmountToOrder     Decimal?             @db.Decimal(36, 18) @map("min_amount_to_order")
  maxAmountToOrder     Decimal?             @db.Decimal(36, 18) @map("max_amount_to_order")
  status               order_status         @default(open)
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")

  user                 User                 @relation(fields: [userId], references: [id])
  baseCurrency         Currency             @relation("base_currency", fields: [baseCurrencyId], references: [id])
  fiatCurrency         Currency             @relation("fiat_currency", fields: [fiatCurrencyId], references: [id])
  transactions        Transaction[]        @relation("order")

  @@map("order")
}

model Transaction {
  id               String                @id @default(uuid()) @db.Uuid
  fromUserId       String?               @db.Uuid @map("from_user_id")
  toUserId         String?               @db.Uuid @map("to_user_id")
  toAddress        String?               @map("to_address")
  orderId          String?               @db.Uuid @map("order_id")
  amountIn         Decimal               @db.Decimal(36, 18) @map("amount_in")
  amountOut        Decimal               @db.Decimal(36, 18) @map("amount_out")
  fee              Decimal               @default(0)
  type             transaction_type      
  status           transaction_status    @default(pending)
  createdAt        DateTime              @default(now()) @map("created_at")
  updatedAt        DateTime              @updatedAt @map("updated_at")

  fromUser         User?                @relation("from_user", fields: [fromUserId], references: [id])
  toUser           User?                @relation("to_user", fields: [toUserId], references: [id])
  order            Order?               @relation("order", fields: [orderId], references: [id])
  @@map("transaction")
}
